name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      # First register the task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./bankloan-task-definition.json
          container-name: bankloan-model-api
          image: public.ecr.aws/k8f5x7g7/aniketrastogi1987/aiml-mp-xgboost:latest

      # Create ECS Cluster if it doesn't exist
      - name: Ensure ECS Cluster Exists
        run: |
          aws ecs describe-clusters --clusters xgboost-ecr || \
          aws ecs create-cluster --cluster-name xgboost-ecr
      
        # Create or update ECS service using the registered task definition
        # Register task definition first
      - name: Register ECS task definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://bankloan-task-definition.json
    
      - name: Deploy ECS Service
        run: |
          # Get the latest task definition ARN
          TASK_DEF_ARN=$(aws ecs list-task-definitions --family-prefix bankloan-model --sort DESC --max-items 1 --query 'taskDefinitionArns[0]' --output text)
          echo "Using task definition: ${TASK_DEF_ARN}"
              
          # Check if service exists
          if ! aws ecs describe-services --cluster xgboost-ecr --services bankloan-model-service --query 'services[0]' --output text; then
            echo "Creating new ECS service..."
            aws ecs create-service \
              --cluster xgboost-ecr \
              --service-name bankloan-model-service \
              --task-definition ${TASK_DEF_ARN} \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_ID }}],securityGroups=[${{ secrets.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}"
          else
            echo "Updating existing ECS service..."
            aws ecs update-service \
              --cluster xgboost-ecr \
              --service bankloan-model-service \
              --task-definition ${TASK_DEF_ARN} \
              --force-new-deployment
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_ID }}],securityGroups=[${{ secrets.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}"
          fi
     # - name: Wait for service stability
     #   run: |
     #     aws ecs wait services-stable \
     #       --cluster xgboost-ecr \
     #       --services bankloan-model-service

     # - name: Update Lambda Function
     #   run: |
     #     aws lambda update-function-code \
     #       --function-name bankloan-model-lambda \
     #       --image-uri public.ecr.aws/k8f5x7g7/aniketrastogi1987/aiml-mp-xgboost:latest
