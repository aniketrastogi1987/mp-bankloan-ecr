name: CI Pipeline
on:
  push:
    branches:
      - main
  workflow_dispatch:
#  schedule:
#    - cron: '0 2 * * 0'

jobs:
  train:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: pip install -r requirements/requirements.txt
    - name: Train and save pipeline
      run: python bankloan_model/train_pipeline.py
    - uses: actions/upload-artifact@v4
      with:
        name: my-trained-pipeline
        path: bankloan_model/trained_models/*.pkl
        retention-days: 1
  
  
  
  tune:
    needs: train
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install -e .
          pip install optuna

      - uses: actions/download-artifact@v4
        with:
          name: my-trained-pipeline
          path: bankloan_model/trained_models

      - name: Run Hyperparameter Tuning
        run: python bankloan_model/tune_hyperparameters.py

      - uses: actions/upload-artifact@v4
        with:
          name: best-params
          path: bankloan_model/best_trial.json
          retention-days: 2

  retrain:
    needs: tune
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install -e .
      - uses: actions/download-artifact@v4
        with:
          name: best-params
          path: bankloan_model/
      - name: Retrain with optimized parameters
        run: python bankloan_model/train_pipeline.py --best_params best_trial.json
      - uses: actions/upload-artifact@v4
        with:
          name: optimized-model
          path: bankloan_model/trained_models/*.pkl
          retention-days: 2

  test:
    needs: retrain
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/download-artifact@v4
      with:
        name: optimized-model
        path: bankloan_model/trained_models
    - name: Install dependencies
      run: pip install -r requirements/test_requirements.txt
    - name: Test with pytest
      run: pytest

  build:
    needs: [retrain, test]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/download-artifact@v4
      with:
        name: optimized-model
        path: bankloan_model/trained_models
    - name: Install dependencies
      run: pip install --upgrade build
    - name: Build package
      run: python -m build
    - uses: actions/upload-artifact@v4
      with:
        name: my-build-package
        path: dist/*.whl
        retention-days: 1

  push-image:
    needs: [train, tune, test, build]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - uses: actions/download-artifact@v4
      with:
        name: my-build-package
        path: bankloan_model_api
        
    - uses: actions/download-artifact@v4
      with:
        name: optimized-model
        path: bankloan_model/trained_models

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public
        
    - name: Build, Tag, and Push Docker image
      env:
        REGISTRY: public.ecr.aws/k8f5x7g7
        REPOSITORY: aniketrastogi1987/aiml-mp-xgboost
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Debug information
        echo "Building image: $REGISTRY/$REPOSITORY:$IMAGE_TAG"
        
        # Build the docker image
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest
        
        # Push both tagged versions
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker push $REGISTRY/$REPOSITORY:latest
        
        # Output the image URI for use in CD pipeline
        echo "IMAGE_URI=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV